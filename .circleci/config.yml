version: 2.1

orbs:
  node: circleci/node@5.1.0

jobs:
  build-and-test:
    docker:
      - image: cimg/node:22.0
    steps:
      - checkout

      # Install dependencies
      - node/install-packages:
          pkg-manager: npm
      
      # Test application startup (catches runtime compatibility issues)
      - run:
          name: Test Application Startup
          command: |
            echo "Testing application can start without runtime errors..."
            npm run dev &
            SERVER_PID=$!
            sleep 10
            if kill -0 $SERVER_PID 2>/dev/null; then
              echo "✓ Application startup test passed!"
              kill $SERVER_PID
            else
              echo "✗ ERROR: Application failed to start"
              exit 1
            fi
      
      # Build and validate PartyKit server code
      - run:
          name: Build PartyKit Server
          command: |
            npm run build
            echo "TypeScript compilation successful!"
      
      # Test PartyKit deployment to catch config issues
      - run:
          name: Test PartyKit Deploy
          command: |
            echo "Testing PartyKit deployment..."
            
            # Deploy to a test project name to validate everything works
            TEST_PROJECT_NAME="test-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM}"
            
            echo "Deploying test project: $TEST_PROJECT_NAME"
            npx partykit deploy --name "$TEST_PROJECT_NAME" || {
              echo "❌ ERROR: PartyKit deployment failed!"
              echo "This would fail in production too."
              exit 1
            }
            
            echo "✅ Test deployment successful!"
            
            # Clean up the test deployment
            echo "Cleaning up test deployment..."
            npx partykit delete --name "$TEST_PROJECT_NAME" || {
              echo "⚠️  Warning: Could not clean up test deployment"
            }
      
      # Build web extension to ensure it compiles
      - run:
          name: Build Web Extension
          command: |
            export NODE_ENV=production
            export PARTY_HOST=${PARTY_HOST:-"https://github-party.partykit.dev"}
            npm run build:extension
            echo "Web extension build successful!"

  deploy:
    docker:
      - image: cimg/node:22.0
    steps:
      - checkout
      
      # Install dependencies
      - node/install-packages:
          pkg-manager: npm
      
      # Deploy to PartyKit and get the URL
      - run:
          name: Deploy to PartyKit
          command: |
            DEPLOY_OUTPUT=$(npm run deploy 2>&1)
            PARTY_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^[:space:]]*\.partykit\.dev' | head -1)
            
            if [ -n "$PARTY_URL" ]; then
              echo "export DYNAMIC_PARTY_HOST=$PARTY_URL" >> $BASH_ENV
            else
              echo "export DYNAMIC_PARTY_HOST=$PARTY_HOST" >> $BASH_ENV
            fi
      
      # Build the web extension with the real PartyKit URL
      - run:
          name: Build web extension
          command: |
            export NODE_ENV=production
            source $BASH_ENV
            export PARTY_HOST=$DYNAMIC_PARTY_HOST
            npm run build:extension
      
      # Store web extension build artifacts
      - store_artifacts:
          path: web-extension-dist
          destination: web-extension

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build-and-test:
          context:
            - partykit-deploy
          filters:
            branches:
              ignore:
                - main
      
      - deploy:
          context:
            - partykit-deploy
          filters:
            branches:
              only:
                - main
